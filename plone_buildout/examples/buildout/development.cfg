[buildout]
extends-cache = extends
extends =
    cfg/base.cfg
    cfg/sources.cfg

parts +=
# Develop only parts
    client1
    client2
    zeoserver
    celery
    redis
    solr-download
    solr-instance
    supervisor
    zopepy
    test
    coverage-test
    coverage-report
    mkrelease
    zopeskel
    omelette

[client1]
debug-mode = off
verbose-security = on
eggs +=
    plone.reload

[client2]
<= client1
http-address = 8082
zeo-client-client = zeoclient-2

[supervisor]
recipe = collective.recipe.supervisor
port = 9003
user = admin
password = admin
supervisord-environment =
    TMP=${tmp:paths}
    TEMP=${tmp:paths}
    TMPDIR=${tmp:paths}
programs =
    10 zeoserver ${buildout:directory}/parts/zeoserver/bin/runzeo true
    20 client1 (autostart=false) ${buildout:directory}/bin/client1 [console] true
    20 client2 (autostart=false startsecs=5) ${buildout:directory}/bin/client2 [console] true
    30 redis ${buildout:directory}/bin/redis-server [${buildout:directory}/redis.conf] true
    40 celery ${buildout:directory}/bin/celery [worker -B] ${buildout:directory} true
    50 solr ${buildout:directory}/bin/solr-instance [fg] true

[zopepy]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/zc.recipe.egg
recipe = zc.recipe.egg
eggs =
    ${client1:eggs}
    compoze==1.0
interpreter = zopepy
scripts =
    zopepy
    compoze

[test]
recipe = zc.recipe.testrunner
eggs =
    Plone
    ${buildout:eggs}
    robotsuite

defaults = ['--exit-with-status', '--auto-color', '--auto-progress']

[coverage-test]
recipe = zc.recipe.testrunner
eggs = ${test:eggs}
defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']

[coverage-report]
recipe = zc.recipe.egg
eggs = z3c.coverage
scripts = coveragereport
arguments = ('coverage', 'report')

[mkrelease]
recipe = zc.recipe.egg
eggs = jarn.mkrelease
scripts = mkrelease

[zopeskel]
recipe = z3c.recipe.scripts
eggs = 
    PasteScript
    ZopeSkel
    templer.localcommands
    templer.dexterity
    Plone
    ${buildout:eggs}

[omelette]
recipe = collective.recipe.omelette
eggs = ${client1:eggs}
